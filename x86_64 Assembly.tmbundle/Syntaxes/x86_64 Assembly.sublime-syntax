%YAML 1.2
---
file_extensions: [yasm, nasm, asm, inc, s]
scope: source.asm.x86_64

variables:
  num_bin: '(?:[01][01_]*)'
  num_oct: '(?:[0-7][0-7_]*)'
  num_dec: '(?:[0-9][0-9_]*)'
  num_hex: '(?:[[:xdigit:]][[:xdigit:]_]*)'
  num_bin_exp: '(?:p\+?{{num_dec}})'
  num_dec_exp: '(?:e[+-]?{{num_dec}})'
  identifier_body: '(?:[[:alnum:]_$#@~.?]*)'
  valid_identifier: '(?:[[:alpha:]_?]{{identifier_body}})'

contexts:
  prototype:
    - include: comments

  main:
    - include: comments
    - include: prefixes
    - include: data-types
    - include: registers
    - include: mnemonics
    - include: strings
    - include: numbers
    - include: operators
    - include: support
    - include: entities
    - include: labels
    - include: structs
    - include: preprocessor

  numbers:
    - include: floating-point
    - include: integers
  floating-point:
    - match: '\b0[by]{{num_bin}}\.(?:{{num_bin}}?{{num_bin_exp}}?\b)?'
      scope: constant.numeric.binary.floating-point.asm.x86_64
    - match: '\b0[by]{{num_bin}}{{num_bin_exp}}\b'
      scope: constant.numeric.binary.floating-point.asm.x86_64

    - match: '\b0[oq]{{num_oct}}\.(?:{{num_oct}}?{{num_bin_exp}}?\b)?'
      scope: constant.numeric.octal.floating-point.asm.x86_64
    - match: '\b0[oq]{{num_oct}}{{num_bin_exp}}\b'
      scope: constant.numeric.octal.floating-point.asm.x86_64

    - match: '\b{{num_dec}}\.(?:{{num_dec}}?{{num_dec_exp}}?\b)?'
      scope: constant.numeric.decimal.floating-point.asm.x86_64
    - match: '\.{{num_dec}}{{num_dec_exp}}?\b'
      scope: invalid.illegal.constant.numeric.decimal.floating-point.asm.x86_64
    - match: '\b{{num_dec}}{{num_dec_exp}}\b'
      scope: invalid.illegal.constant.numeric.decimal.floating-point.asm.x86_64
    - match: '\b{{num_dec}}p{{num_dec}}?\b'
      scope: constant.numeric.decimal.packed-bcd.asm.x86_64

    - match: '\b0[xh]{{num_hex}}\.(?:{{num_hex}}?{{num_bin_exp}}?\b)?'
      scope: constant.numeric.hex.floating-point.asm.x86_64
    - match: '\b0[xh]{{num_hex}}{{num_bin_exp}}\b'
      scope: constant.numeric.hex.floating-point.asm.x86_64
    - match: '\$[0-9]\_?{{num_hex}}\.(?:{{num_hex}}?{{num_bin_exp}}?\b)?'
      scope: constant.numeric.hex.floating-point.asm.x86_64
    - match: '\$[0-9]\_?{{num_hex}}{{num_bin_exp}}\b'
      scope: constant.numeric.hex.floating-point.asm.x86_64
  integers:
    - match: '\b(?:(?:0[by]{{num_bin}})|(?:{{num_bin}}[by]))\b'
      scope: constant.numeric.binary.asm.x86_64
    - match: '\b(?:(?:0[oq]{{num_oct}})|(?:{{num_oct}}[oq]))\b'
      scope: constant.numeric.octal.asm.x86_64
    - match: '\b(?:(?:0[dt]{{num_dec}})|(?:{{num_dec}}[dt]?))\b'
      scope: constant.numeric.decimal.asm.x86_64
    - match: '(?:\$[0-9]\_?{{num_hex}}?)\b'
      scope: constant.numeric.hex.asm.x86_64
    - match: '\b(?:(?:0[xh]{{num_hex}})|(?:{{num_hex}}[hxHX]))\b'
      scope: constant.numeric.hex.asm.x86_64

  labels:
    # http://www.nasm.us/doc/nasmdoc3.html#section-3.9
    - match: '(\.\.@)({{valid_identifier}})(?:(\:)?|\b)'
      captures:
        1: punctuation.separator.asm.x86_64 storage.modifier.asm.x86_64
        2: entity.name.constant.special.asm.x86_64
        3: punctuation.separator.asm.x86_64
    - match: '(?:(\.)?|\b)({{valid_identifier}})(?:(\:)?|\b)'
      captures:
        1: punctuation.separator.asm.x86_64 storage.modifier.asm.x86_64
        2: entity.name.constant.asm.x86_64
        3: punctuation.separator.asm.x86_64
    - match: '(?:(\.)?|\b)([0-9$@~]{{identifier_body}})(?:(\:)?|\b)'
      captures:
        1: punctuation.separator.asm.x86_64 storage.modifier.asm.x86_64
        2: invalid.illegal.entity.name.constant.asm.x86_64
        3: punctuation.separator.asm.x86_64
    - match: '((%)(\d+))'
      captures:
        1: invalid.illegal.meta.preprocessor.asm.x86_64
        2: punctuation.definition.variable.preprocessor.asm.x86_64 keyword.control.preprocessor.asm.x86_64
        3: variable.other.preprocessor.asm.x86_64
    - match: '((%%)({{valid_identifier}})(?:(\:)?|\b))'
      captures:
        1: invalid.illegal.meta.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64 keyword.control.preprocessor.asm.x86_64
        3: entity.name.constant.special.asm.x86_64
        4: punctuation.separator.asm.x86_64

  data-types:
    # Initialized & uninitialized data: http://www.nasm.us/doc/nasmdoc3.html#section-3.2.1
    - match: '(?i)\b(?:s?byte|(?:[doqtyz]|dq|s[dq]?)?word|(?:d|res)[bdoqtwyz]|ddq)\b'
      scope: storage.type.asm.x86_64
    - match: '(?i)\b(?:incbin|equ|times)\b'
      scope: support.function.asm.x86_64

  prefixes:
    - match: '\b(?:strict|nosplit|near|far|abs|rel|absolute|common)\b'
      scope: storage.modifier.asm.x86_64
    - match: '\b(?:[ao](?:16|32|64))\b'
      scope: storage.modifier.prefix.asm.x86_64
    - match: '\b(?:rep(?:n?[ez])?|lock|xacquire|xrelease|(?:no)?bnd)\b'
      scope: storage.modifier.prefix.asm.x86_64
    - match: '(?i)\b(\.?(alignb?|bits|cpu|fpu)|use(16|32|64))\b'
      scope: keyword.other.asm.x86_64

  support:
    # http://www.nasm.us/doc/nasmdoc7.html#section-7.4.6
    - match: '\.\.(?:start|imagebase|tlvp|got(?:pc(?:rel)?|(?:tp)?off)?|plt|sym|tlsie)\b'
      scope: support.function.asm.x86_64
    - match: '\b__(utf((16|32)([lb]e)?)|float(8|16|32|64|80[me]|128[lh])|Infinity|[QS]?NaN)__\b'
      scope: support.function.asm.x86_64
    - match: '\b__(BITS)__\b'
      scope: support.function.asm.x86_64

  operators:
    - match: '[+\-*/]'
      scope: keyword.operator.arithmetic.asm.x86_64
    - match: '(%%|%)[[:space:]]'
      captures:
        1: keyword.operator.arithmetic.asm.x86_64
    - match: '[|&^~!]|<<|>>'
      scope: keyword.operator.bitwise.asm.x86_64
    - match: '\b(seg|wrt)\b'
      scope: keyword.operator.word.asm.x86_64
    - match: ','
      scope: operator.separator.asm.x86_64

  structs:
    - match: '(?i)\b((end|i)?struc|at|iend)\b'
      scope: meta.struct.asm.x86_64

  entities:
    - match: '((section|segment)\s+)?\.((ro)?data|bss|text)'
      scope: entity.name.section
    - match: '\b(?:private|public|common|stack)\b'
      scope: storage.modifier
    - match: '(\$)(\w+)\b'
      scope: variable.other
      captures:
        1: punctuation.definition.variable
    - match: '\$'
      scope: variable.language
    - match: '^\.?(globa?l|extern)\b'
      scope: entity.directive
 
  comments:
    - match: (?:(;)|(?:^|\s)(#)\s).*$
      scope: comment.line.asm.x86_64
      captures:
        1: punctuation.definition.comment.asm.x86_64
        2: punctuation.definition.comment.asm.x86_64
    - match: /\*
      scope: punctuation.definition.comment.asm.x86_64
      push:
        - meta_scope: comment.block.asm.x86_64
        - match: \*/
          scope: punctuation.definition.comment.asm.x86_64
          pop: true

  preprocessor: # http://www.nasm.us/doc/nasmdoc4.html
    - include: preprocessor-macro-multiline
    - include: preprocessor-macro-define
    - include: preprocessor-macro-indirection
    - include: preprocessor-other
  preprocessor-macro-multiline:
    - match: '^\s*((%)i?macro)\b'
      captures:
        1: meta.preprocessor.macro.asm.x86_64 keyword.control.import.define.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      push:
        - meta_content_scope: meta.preprocessor.macro.asm.x86_64
        - include: preprocessor-comments
        - match: '(?:{{valid_identifier}})(?=\()'
          scope: entity.name.constant.preprocessor.asm.x86_64
          set:
            - meta_content_scope: invalid.illegal.asm.x86_64
            - match: '\('
              scope: punctuation.section.group.begin.asm.x86_64
              set: preprocessor-macro-params-illegal
        - match: '({{valid_identifier}})(?:\s+(?:(\d+(?:(-)(?:\d+|\*))?)(\+)?))'
          captures:
            1: entity.name.function.preprocessor.asm.x86_64
            2: variable.parameter.preprocessor.asm.x86_64
            3: keyword.operator.preprocessor.range.asm.x86_64
            4: storage.modifier.preprocessor.greedy.asm.x86_64
          set: preprocessor-macro-definition-multiline
    - match: '^\s*((%)endmacro)\b'
      captures:
        1: invalid.illegal.meta.preprocessor.asm.x86_64 keyword.control.import.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
  preprocessor-macro-define:
    - match: '^\s*((%)x?i?define)\b'
      captures:
        1: meta.preprocessor.macro.asm.x86_64 keyword.control.import.define.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      push:
        - meta_content_scope: meta.preprocessor.macro.asm.x86_64
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '(?:{{valid_identifier}})(?=\()'
          scope: entity.name.function.preprocessor.asm.x86_64
          set:
            - match: '\('
              scope: punctuation.section.group.begin.asm.x86_64
              set: preprocessor-macro-params
        - match: '{{valid_identifier}}'
          scope: entity.name.constant.preprocessor.asm.x86_64
          set: preprocessor-macro-definition
    - match: '^\s*((%)(?:assign|i?deftok|strcat|strlen|substr))\b'
      captures:
        1: meta.preprocessor.macro.asm.x86_64 keyword.control.import.assign.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      push:
        - meta_content_scope: meta.preprocessor.macro.asm.x86_64
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '(?:{{valid_identifier}})(?=\()'
          scope: entity.name.constant.preprocessor.asm.x86_64
          set:
            - meta_content_scope: invalid.illegal.asm.x86_64
            - match: '\('
              scope: punctuation.section.group.begin.asm.x86_64
              set: preprocessor-macro-params-illegal
        - match: '{{valid_identifier}}'
          scope: entity.name.constant.preprocessor.asm.x86_64
          set: preprocessor-macro-definition
    - match: '^\s*((%)i?defstr)\s+({{valid_identifier}})\b'
      captures:
        1: meta.preprocessor.macro.asm.x86_64 keyword.control.import.assign.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
        3: entity.name.constant.preprocessor.asm.x86_64
      push:
        - meta_content_scope: meta.preprocessor.macro.asm.x86_64 string.quoted.single.asm.x86_64
        - include: preprocessor-line-ending
        - include: preprocessor-macro-indirection
  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.asm.x86_64
    - match: '\\(\s+?)$'
      captures:
        1: invalid.illegal.space-after-continuation.asm.x86_64
  preprocessor-line-ending:
    - match: '$\n'
      pop: true
  preprocessor-macro-params-illegal:
    - meta_scope: invalid.illegal.asm.x86_64
    - include: preprocessor-macro-params
  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.asm.x86_64 meta.group.asm.x86_64
    - match: '{{valid_identifier}}'
      scope: variable.parameter.asm.x86_64
    - match: '\)'
      scope: punctuation.section.group.end.asm.x86_64
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.asm.x86_64
      push:
        - match: '{{valid_identifier}}'
          scope: variable.parameter.asm.x86_64
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.asm.x86_64
        - match: '(?=\))'
          pop: true
        - match: '(/\*).*(\*/)'
          scope: comment.block.asm.x86_64
          captures:
            1: punctuation.definition.comment.asm.x86_64
            2: punctuation.definition.comment.asm.x86_64
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.asm.x86_64
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.asm.x86_64
    - match: '(/\*).*(\*/)'
      scope: comment.block.asm.x86_64
      captures:
        1: punctuation.definition.comment.asm.x86_64
        2: punctuation.definition.comment.asm.x86_64
    - match: '$\n'
      scope: invalid.illegal.unexpected-end-of-line.asm.x86_64
  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.asm.x86_64
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    - include: main
  preprocessor-macro-definition-multiline:
    - meta_content_scope: meta.preprocessor.macro.asm.x86_64
    - include: preprocessor-comments
    - match: '^\s*((%)endmacro)\b'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.control.import.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      pop: true
    - match: '((%)(\d+))'
      captures:
        1: meta.preprocessor.asm.x86_64
        2: punctuation.definition.variable.preprocessor.asm.x86_64 keyword.control.preprocessor.asm.x86_64
        3: variable.other.preprocessor.asm.x86_64
    - match: '((%%)({{valid_identifier}})(?:(\:)?|\b))'
      captures:
        1: meta.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64 keyword.control.preprocessor.asm.x86_64
        3: entity.name.constant.special.asm.x86_64
        4: punctuation.separator.asm.x86_64
    - match: '((%)({))'
      captures:
        1: meta.preprocessor.macro.asm.x86_64 keyword.control.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
        3: meta.braces.asm.x86_64 punctuation.section.braces.begin.asm.x86_64
      push:
        - meta_scope: meta.braces.asm.x86_64 meta.preprocessor.macro.asm.x86_64
        - include: preprocessor-macro-indirection
        - match: ':'
          scope: punctuation.separator.asm.x86_64
        - match: '}'
          scope: punctuation.section.braces.end.asm.x86_64 keyword.control.preprocessor.asm.x86_64
          pop: true
    - match: '^\s*((%)(?:rotate))\b'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.operator.word.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      push:
        - meta_scope: meta.preprocessor.asm.x86_64
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '{{valid_identifier}}'
          scope: entity.name.constant.preprocessor.asm.x86_64
          pop: true
    - match: '^\s*((%)rep)\b'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.operator.word.asm.x86_64 meta.block.preprocessor.rep.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      push:
        - meta_scope: meta.preprocessor.asm.x86_64 meta.block.preprocessor.rep.asm.x86_64
        - match: '^\s*((%)endrep)\b'
          captures:
            1: meta.preprocessor.asm.x86_64 keyword.operator.word.asm.x86_64 meta.block.preprocessor.rep.asm.x86_64
            2: punctuation.definition.keyword.preprocessor.asm.x86_64
          pop: true
        - include: preprocessor-macro-definition-multiline-rep
    - match: '^\s*((%)endrep)\b'
      captures:
        1: invalid.illegal.meta.preprocessor.asm.x86_64 keyword.operator.word.asm.x86_64 meta.block.preprocessor.rep.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
    - include: preprocessor-macro-indirection
    - include: main
  preprocessor-macro-definition-multiline-rep:
    - meta_content_scope: meta.preprocessor.macro.rep.asm.x86_64
    - include: preprocessor-comments
    - include: preprocessor-macro-definition-multiline
  preprocessor-macro-indirection:
    - match: '((%)(\[))'
      captures:
        1: meta.preprocessor.macro.asm.x86_64 keyword.control.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
        3: meta.brackets.asm.x86_64 punctuation.section.brackets.begin.asm.x86_64
      push:
        - meta_scope: meta.brackets.asm.x86_64 meta.preprocessor.macro.asm.x86_64
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: main
        - match: '\]'
          scope: punctuation.section.brackets.end.asm.x86_64 keyword.control.preprocessor.asm.x86_64
          pop: true
    - match: '((%)\+)\s+'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.operator.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
    - match: '((%)(\?\??))'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.operator.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
        3: variable.language.preprocessor.asm.x86_64
    - match: '((%)(\!)(\w+))\b'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.operator.preprocessor.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
        3: punctuation.definition.variable.asm.x86_64
        4: variable.parameter.preprocessor.asm.x86_64
  preprocessor-other:
    - include: preprocessor-macro-indirection
    - match: '^\s*((%)undef)\b'
      captures:
        1: meta.preprocessor.asm.x86_64 keyword.control.import.asm.x86_64
        2: punctuation.definition.keyword.preprocessor.asm.x86_64
      push:
        - meta_scope: meta.preprocessor.asm.x86_64
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '{{valid_identifier}}'
          scope: entity.name.constant.preprocessor.asm.x86_64
          pop: true
 
  strings: # Character strings: http://www.nasm.us/doc/nasmdoc3.html#section-3.4.2
    - match: '`'
      scope: punctuation.definition.string.begin.asm.x86_64
      push: string-backquote
    - match: ''''
      scope: punctuation.definition.string.begin.asm.x86_64
      push: string-single
    - match: '"'
      scope: punctuation.definition.string.begin.asm.x86_64
      push: string-double
  string-content:
    - match: '\\u[[:xdigit:]]{4}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\U[[:xdigit:]]{8}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\x[[:xdigit:]]{1,2}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\[0-7]{1,3}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\[''"`\\?abtnvfre]'
      scope: constant.character.escape.asm.x86_64
    - match: '\\.'
      scope: invalid.illegal.constant.character.escape.asm.x86_64
  string-backquote:
    - meta_scope: string.quoted.other.asm.x86_64
    - meta_include_prototype: false
    - include: string-content
    - match: '`'
      scope: punctuation.definition.string.end
      pop: true
  string-single:
    - meta_scope: string.quoted.single.asm.x86_64
    - meta_include_prototype: false
    - match: ''''
      scope: punctuation.definition.string.end
      pop: true
  string-double:
    - meta_scope: string.quoted.double.asm.x86_64
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end
      pop: true

  registers:
    - match: '\b%?([abcd][hl]|[er]?[abcd]x|[er]?(di|si|bp|sp)|dil|sil|bpl|spl|r(8|9|1[0-5])[bdlw]?)\b'
      scope: constant.language.register.general-purpose.asm.x86_64
    - match: '\b%?([cdefgs]s)\b'
      scope: constant.language.register.segment.asm.x86_64
    - match: '\b%?([er]?flags)\b'
      scope: constant.language.register.flags.asm.x86_64
    - match: '\b%?([er]?ip)\b'
      scope: constant.language.register.instruction-pointer.asm.x86_64
    - match: '\b%?(cr[02-4])\b'
      scope: constant.language.register.control.asm.x86_64
    - match: '\b%?((mm|st|fpr)[0-7])\b'
      scope: constant.language.register.mmx.asm.x86_64
    - match: '\b%?([xy]mm([0-9]|1[0-5])|mxcsr)\b'
      scope: constant.language.register.sse_avx.asm.x86_64
    - match: '\b%?(zmm([12]?[0-9]|30|31))\b'
      scope: constant.language.register.avx512.asm.x86_64
    - match: '\b%?(bnd([0-3]|cfg[su]|status))\b'
      scope: constant.language.register.memory-protection.asm.x86_64
    - match: '\b%?(([gil]dt)r?|tr)\b'
      scope: constant.language.register.system-table-pointer.asm.x86_64
    - match: '\b%?(dr[0-367])\b'
      scope: constant.language.register.debug.asm.x86_64
    - match: '\b%?(cr8|dr([89]|1[0-5])|efer|tpr|syscfg)\b'
      scope: constant.language.register.amd.asm.x86_64
    - match: '\b%?(db[0-367]|t[67]|tr[3-7]|st)\b'
      scope: invalid.deprecated.constant.language.register.asm.x86_64

  mnemonics: # see valid.asm for references
    - include: mnemonics-general-purpose
    - include: mnemonics-fpu
    - include: mnemonics-mmx
    - include: mnemonics-sse
    - include: mnemonics-sse2
    - include: mnemonics-sse3
    - include: mnemonics-sse4
    - include: mnemonics-aesni
    - include: mnemonics-avx
    - include: mnemonics-avx2
    - include: mnemonics-tsx
    - include: mnemonics-system
    - include: mnemonics-64bit
    - include: mnemonics-vmx
    - include: mnemonics-smx
    - include: mnemonics-intel-isa-sgx
    - include: mnemonics-intel-isa-mpx
    - include: mnemonics-intel-isa-sha
    - include: mnemonics-supplemental-amd
    - include: mnemonics-supplemental-cyrix
    - include: mnemonics-supplemental-via
    - include: mnemonics-undocumented
    - include: mnemonics-future-intel
    - include: mnemonics-pseudo-ops
    #- include: mnemonics-invalid
  mnemonics-general-purpose:
    - match: '\b(?:mov(?:[sz]x)?|cmov(?:n?[abceglopsz]|n?[abgl]e|p[eo]))\b'
      scope: keyword.operator.word.mnemonic.general-purpose.data-transfer.mov
    - match: '\b(xchg|bswap|xadd|cmpxchg(8b)?)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.data-transfer.xchg
    - match: '\b((push|pop)(ad?)?|cwde?|cdq|cbw)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.data-transfer.other
    - match: '\b(adcx?|adox|add|sub|sbb|i?mul|i?div|inc|dec|neg|cmp)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.binary-arithmetic
    - match: '\b(daa|das|aaa|aas|aam|aad)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.decimal-arithmetic
    - match: '\b(and|x?or|not)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.logical
    - match: '\b(s[ah][rl]|sh[rl]d|r[co][rl])\b'
      scope: keyword.operator.word.mnemonic.general-purpose.rotate
    - match: '\b(set(n?[abceglopsz]|n?[abgl]e|p[eo]))\b'
      scope: keyword.operator.word.mnemonic.general-purpose.bit-and-byte.set
    - match: '\b(bt[crs]?|bs[fr]|test|crc32|popcnt)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.bit-and-byte.other
    - match: '\b(jmp|jn?[abceglopsz]|jn?[abgl]e|jp[eo]|j[er]?cxz)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.control-transfer.jmp
    - match: '\b(loop(n?[ez])?|call|ret|iret[dq]?|into?|bound|enter|leave)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.control-transfer.other
    - match: '\b((mov|cmp|sca|lod|sto)(s[bdw]?)|rep(n?[ez])?)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.strings
    - match: '\b((in|out)(s[bdw]?)?)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.io
    - match: '\b((st|cl)[cdi]|cmc|[ls]ahf|(push|pop)f[dq]?)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.flag-control
    - match: '\b(l[defgs]s)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.segment-registers
    - match: '\b(lea|nop|ud2|xlatb?|cpuid|movbe)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.misc
    - match: '\b(rdrand|rdseed)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.rng
    - match: '\b(andn|bextr|bls(i|r|msk)|bzhi|pdep|pext|[lt]zcnt|(mul|ror|sar|shl|shr)x)\b'
      scope: keyword.operator.word.mnemonic.general-purpose.bmi
  mnemonics-fpu:
    - match: '\b(fcmov(n?([beu]|be)))\b'
      scope: keyword.operator.word.mnemonic.fpu.data-transfer.mov
    - match: '\b(f(i?(ld|stp?)|b(ld|stp)|xch))\b'
      scope: keyword.operator.word.mnemonic.fpu.data-transfer.other
    - match: '\b(f((add|div|mul|sub)p?|i(add|div|mul|sub)|(div|sub)rp?|i(div|sub)r))\b'
      scope: keyword.operator.word.mnemonic.fpu.basic-arithmetic.basic
    - match: '\b(f(prem1?|abs|chs|rndint|scale|sqrt|xtract))\b'
      scope: keyword.operator.word.mnemonic.fpu.basic-arithmetic.other
    - match: '\b(f(u?com[ip]?p?|icomp?|tst|xam))\b'
      scope: keyword.operator.word.mnemonic.fpu.comparison
    - match: '\b(f(sin|cos|sincos|pa?tan|2xm1|yl2x(p1)?))\b'
      scope: keyword.operator.word.mnemonic.fpu.transcendental
    - match: '\b(fld(1|z|pi|l2[et]|l[ng]2))\b'
      scope: keyword.operator.word.mnemonic.fpu.load-constants
    - match: '\b(f((inc|dec)stp|free|n?(init|clex|st[cs]w|stenv|save)|ld(cw|env)|rstor|nop)|f?wait)\b'
      scope: keyword.operator.word.mnemonic.fpu.control-management
    - match: '\b(fx(save|rstor)(64)?)\b'
      scope: keyword.operator.word.mnemonic.fpu.state-management
  mnemonics-mmx:
    - match: '\b(mov[dq])\b'
      scope: keyword.operator.word.mnemonic.mmx.data-transfer
    - match: '\b(pack(ssdw|[su]swb)|punpck[hl](bw|dq|wd))\b'
      scope: keyword.operator.word.mnemonic.mmx.conversion
    - match: '\b(p(((add|sub)(d|(u?s)?[bw]))|maddwd|mul[lh]w))\b'
      scope: keyword.operator.word.mnemonic.mmx.packed-arithmetic
    - match: '\b(pcmp((eq|gt)[bdw]))\b'
      scope: keyword.operator.word.mnemonic.mmx.comparison
    - match: '\b(pandn?|px?or)\b'
      scope: keyword.operator.word.mnemonic.mmx.logical
    - match: '\b(ps([rl]l[dwq]|raw|rad))\b'
      scope: keyword.operator.word.mnemonic.mmx.shift-and-rotate
    - match: '\b(emms)\b'
      scope: keyword.operator.word.mnemonic.mmx.state-management
  mnemonics-sse:
    - match: '\b(mov(([ahlu]|hl|lh|msk)ps|ss))\b'
      scope: keyword.operator.word.mnemonic.sse.data-transfer
    - match: '\b((add|div|max|min|mul|rcp|r?sqrt|sub)[ps]s)\b'
      scope: keyword.operator.word.mnemonic.sse.packed-arithmetic
    - match: '\b(cmp[ps]s|u?comiss)\b'
      scope: keyword.operator.word.mnemonic.sse.comparison
    - match: '\b((andn?|x?or)ps)\b'
      scope: keyword.operator.word.mnemonic.sse.logical
    - match: '\b((shuf|unpck[hl])ps)\b'
      scope: keyword.operator.word.mnemonic.sse.shuffle-and-unpack
    - match: '\b(cvt(pi2ps|si2ss|ps2pi|tps2pi|ss2si|tss2si))\b'
      scope: keyword.operator.word.mnemonic.sse.conversion
    - match: '\b((ld|st)mxcsr)\b'
      scope: keyword.operator.word.mnemonic.sse.state-management
    - match: '\b(p(avg[bw]|extrw|insrw|(max|min)(sw|ub)|sadbw|shufw|mulhuw|movmskb))\b'
      scope: keyword.operator.word.mnemonic.sse.simd-integer
    - match: '\b(maskmovq|movntps|sfence)\b'
      scope: keyword.operator.word.mnemonic.sse.cacheability-control
    - match: '\b(prefetch(nta|t[0-2]|w(t1)?))\b'
      scope: keyword.operator.word.mnemonic.sse.prefetch
  mnemonics-sse2:
    - match: '\b(mov([auhl]|msk)pd)\b'
      scope: keyword.operator.word.mnemonic.sse2.data-transfer
    - match: '\b((add|div|max|min|mul|sub|sqrt)[ps]d)\b'
      scope: keyword.operator.word.mnemonic.sse2.packed-arithmetic
    - match: '\b((andn?|x?or)pd)\b'
      scope: keyword.operator.word.mnemonic.sse2.logical
    - match: '\b((cmpp|u?comis)d)\b'
      scope: keyword.operator.word.mnemonic.sse2.compare
    - match: '\b((shuf|unpck[hl])pd)\b'
      scope: keyword.operator.word.mnemonic.sse2.shuffle-and-unpack
    - match: '\b(cvt(dq2pd|pi2pd|ps2pd|pd2ps|si2sd|sd2ss|ss2sd|t?(pd2dq|pd2pi|sd2si)))\b'
      scope: keyword.operator.word.mnemonic.sse2.conversion
    - match: '\b(cvt(dq2ps|ps2dq|tps2dq))\b'
      scope: keyword.operator.word.mnemonic.sse2.packed-floating-point
    - match: '\b(mov(dq[au]|q2dq|dq2q))\b'
      scope: keyword.operator.word.mnemonic.sse2.simd-integer.mov
    - match: '\b(p((add|sub|(s[lr]l|mulu|unpck[hl]q)d)q|shuf(d|[hl]w)))\b'
      scope: keyword.operator.word.mnemonic.sse2.simd-integer.other
    - match: '\b(clflush|[lm]fence|pause|maskmovdqu|movnt(dq|i|pd))\b'
      scope: keyword.operator.word.mnemonic.sse2.cacheability-control
  mnemonics-sse3:
    - match: '\b(fisttp|lddqu|(addsub|h(add|sub))p[sd]|mov(sh|sl|d)dup|monitor|mwait)\b'
      scope: keyword.operator.word.mnemonic.sse3
    - match: '\b(ph(add|sub)(s?w|d))\b'
      scope: keyword.operator.word.mnemonic.sse3.supplimental.horizontal-packed-arithmetic
    - match: '\b(p((abs|sign)[bdw]|maddubsw|mulhrsw|shufb|alignr))\b'
      scope: keyword.operator.word.mnemonic.sse3.supplimental.other
  mnemonics-sse4:
    - match: '\b(pmul(ld|dq)|dpp[ds])\b'
      scope: keyword.operator.word.mnemonic.sse4.1.arithmetic
    - match: '\b(movntdqa)\b'
      scope: keyword.operator.word.mnemonic.sse4.1.load-hint
    - match: '\b(blendv?p[ds]|pblend(vb|w))\b'
      scope: keyword.operator.word.mnemonic.sse4.1.packed-blending
    - match: '\b(p(min|max)(u[dw]|s[bd]))\b'
      scope: keyword.operator.word.mnemonic.sse4.1.packed-integer
    - match: '\b(round[ps][sd])\b'
      scope: keyword.operator.word.mnemonic.sse4.1.packed-floating-point
    - match: '\b((extract|insert)ps|p((ins|ext)(r[bdq])))\b'
      scope: keyword.operator.word.mnemonic.sse4.1.insertion-and-extraction
    - match: '\b(pmov([sz]x(b[dqw]|dq|wd|wq)))\b'
      scope: keyword.operator.word.mnemonic.sse4.1.conversion
    - match: '\b(mpsadbw|phminposuw|ptest|pcmpeqq|packusdw)\b'
      scope: keyword.operator.word.mnemonic.sse4.1.other
    - match: '\b(pcmp([ei]str[im]|gtq))\b'
      scope: keyword.operator.word.mnemonic.sse4.2
  mnemonics-aesni:
    - match: '\b(aes((dec|enc)(last)?|imc|keygenassist)|pclmulqdq)\b'
      scope: keyword.operator.word.mnemonic.aesni
  mnemonics-avx:
    - match: '\b(v((test|permil|maskmov)p[ds]|zero(all|upper)|(perm2|insert|extract|broadcast)f128|broadcasts[ds]))\b'
      scope: keyword.operator.word.mnemonic.avx
    - match: '\b(vaes((dec|enc)(last)?|imc|keygenassist)|vpclmulqdq)\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.aes
    - match: '\b(v((cmp[ps]|u?comis)[ds]|pcmp([ei]str[im]|(eq|gt)[bdqw])))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.comparison
    - match: '\b(v(cvt(dq2pd|dq2ps|pd2ps|ps2pd|sd2ss|si2sd|si2ss|ss2sd|t?(pd2dq|ps2dq|sd2si|ss2si))))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.conversion
    - match: '\b(vh((add|sub)p[ds])|vph((add|sub)([dw]|sw)|minposuw))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.horizontal-packed-arithmetic
    - match: '\b(v((andn?|x?or)p[ds]))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.logical
    - match: '\b(v(mov(([ahl]|msk|nt|u)p[ds]|(hl|lh)ps|s([ds]|[hl]dup)|q)))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.mov
    - match: '\b(v((add|div|mul|sub|max|min|round|sqrt)[ps][ds]|(addsub|dp)p[ds]|(rcp|rsqrt)[ps]s))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.packed-arithmetic
    - match: '\b(v(pack[su]s(dw|wb)|punpck[hl](bw|dq|wd|qdq)|unpck[hl]p[ds]))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.packed-conversion
    - match: '\b(vp(shuf([bd]|[hl]w))|vshufp[ds])\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.packed-shuffle
    - match: '\b(vp((abs|sign|(max|min)[su])[bdw]|(add|sub)([bdqw]|u?s[bw])|avg[bw]|extr[bdqw]|madd(wd|ubsw)|mul(hu?w|hrsw|l[dw]|u?dq)|sadbw))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.supplemental.arithmetic
    - match: '\b(vp(andn?|x?or))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.supplemental.logical
    - match: '\b(vpblend(vb|w))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.supplemental.blending
    - match: '\b(vpmov(mskb|[sz]x(b[dqw]|w[dq]|dq)))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.supplemental.mov
    - match: '\b(vp(insr[bdqw]|sll(dq|[dqw])|srl(dq)))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.simd-integer
    - match: '\b(vp(sra[dw]|srl[dqw]))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.shift-and-rotate
    - match: '\b(vblendv?p[ds])\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.packed-blending
    - match: '\b(vp(test|alignr))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.packed-other
    - match: '\b(vmov(d(dup|qa|qu)?))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.simd-integer.mov
    - match: '\b(v((extract|insert)ps|lddqu|(ld|st)mxcsr|mpsadbw))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.other
    - match: '\b(v(maskmovdqu|movntdqa?))\b'
      scope: keyword.operator.word.mnemonic.avx.promoted.cacheability-control
    - match: '\b(vcvt(ph2ps|ps2ph))\b'
      scope: keyword.operator.word.mnemonic.16-bit-floating-point-conversion
    - match: '\b(vfn?m((add|sub)(132|213|231)[ps][ds])|vfm((addsub|subadd)(132|213|231)p[ds]))\b'
      scope: keyword.operator.word.mnemonic.fma
  mnemonics-avx2:
    - match: '\b(v((broadcast|extract|insert|perm2)i128|pmaskmov[dq]|perm([dsq]|p[sd])))\b'
      scope: keyword.operator.word.mnemonic.avx2.promoted.simd
    - match: '\b(vpbroadcast[bdqw])\b'
      scope: keyword.operator.word.mnemonic.avx2.promoted.packed
    - match: '\b(vp(blendd|s[lr]lv[dq]|sravd))\b'
      scope: keyword.operator.word.mnemonic.avx2.blend
    - match: '\b(vp?gather[dq][dq]|vgather([dq]|dq)p[ds])\b'
      scope: keyword.operator.word.mnemonic.avx2.gather
  mnemonics-tsx:
    - match: '\b(x(abort|acquire|release|begin|end|test))\b'
      scope: keyword.operator.word.mnemonic.tsx
  mnemonics-system:
    - match: '\b((cl|st)ac|[ls]([gli]dt|tr|msw)|clts|arpl|lar|lsl|ver[rw]|inv(d|lpg|pcid)|wbinvd)\b'
      scope: keyword.operator.word.mnemonic.system
    - match: '\b(lock|hlt|rsm|(rd|wr)(msr|pkru|[fg]sbase)|rd(pmc|tscp?)|sys(enter|exit))\b'
      scope: keyword.operator.word.mnemonic.system
    - match: '\b(x((save(c|opt|s)?|rstors?)(64)?|[gs]etbv))\b'
      scope: keyword.operator.word.mnemonic.system
  mnemonics-64bit:
    - match: '\b(cdqe|cqo|(cmp|lod|mov|sto)sq|cmpxchg16b|mov(ntq|sxd)|scasq|swapgs|sys(call|ret))\b'
      scope: keyword.operator.word.mnemonic.64-bit-mode
  mnemonics-vmx:
    - match: '\b(vm(ptr(ld|st)|clear|read|write|launch|resume|xo(ff|n)|call|func)|inv(ept|vpid))\b'
      scope: keyword.operator.word.mnemonic.vmx
  mnemonics-smx:
    - match: '\b(getsec)\b'
      scope: keyword.operator.word.mnemonic.smx.getsec
    - match: '\b(capabilities|enteraccs|exitac|senter|sexit|parameters|smctrl|wakeup)\b'
      scope: support.constant
  mnemonics-intel-isa-sgx:
    - match: '\be(add|block|create|dbg(rd|wr)|extend|init|ld[bu]|pa|remove|track|wb)\b'
      scope: keyword.operator.word.mnemonic.sgx1.supervisor
    - match: '\be(enter|exit|getkey|report|resume)\b'
      scope: keyword.operator.word.mnemonic.sgx1.user
    - match: '\be(aug|mod(pr|t))\b'
      scope: keyword.operator.word.mnemonic.sgx2.supervisor
    - match: '\be(accept(copy)?|modpe)\b'
      scope: keyword.operator.word.mnemonic.sgx2.user
  mnemonics-intel-isa-mpx:
    - match: '\b(bnd(mk|c[lnu]|mov|ldx|stx))\b'
      scope: keyword.operator.word.mnemonic.mpx
  mnemonics-intel-isa-sha:
    - match: '\b(sha(1rnds4|256rnds2|1nexte|(1|256)msg[12]))\b'
      scope: keyword.operator.word.mnemonic.sha
  mnemonics-supplemental-amd:
    - match: '\b(bl([cs](fill|ic?|msk)|cs)|t1mskc|tzmsk)\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.general-purpose
    - match: '\b(clgi|int3|invlpga|iretw|skinit|stgi|vm(load|mcall|run|save)|monitorx|mwaitx)\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.system
    - match: '\b([ls]lwpcb|lwp(ins|val))\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.profiling
    - match: '\b(movnts[ds])\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.memory-management
    - match: '\b(prefetch|clzero)\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.cache-management
    - match: '\b((extr|insert)q)\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.sse4.a
    - match: '\b(vfn?m((add|sub)[ps][ds])|vfm((addsub|subadd)p[ds]))\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.fma4
    - match: '\b(vp(cmov|(comu?|rot|sh[al])[bdqw]|mac(s?s(d(d|q[hl])|w[dw]))|madcss?wd|perm))\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.xop.simd
    - match: '\b(vph(addu?(b[dqw]|w[dq]|dq)|sub(bw|dq|wd)))\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.xop.simd-horizontal
    - match: '\b(vfrcz[ps][ds]|vpermil2p[ds])\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.xop.other
    - match: '\b(femms)\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.3dnow
    - match: '\b(p(avgusb|(f2i|i2f)[dw]|mulhrw|swapd)|pf((p?n)?acc|add|max|min|mul|rcp(it[12])?|rsqit1|rsqrt|subr?))\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.3dnow.simd
    - match: '\b(pfcmp(eq|ge|gt))\b'
      scope: keyword.operator.word.mnemonic.supplemental.amd.3dnow.comparison
  mnemonics-supplemental-cyrix:
    - match: '\b((sv|rs)dc|(wr|rd)shr)\b'
      scope: keyword.operator.word.mnemonic.supplemental.cyrix
  mnemonics-supplemental-via:
    - match: '\b(montmul)\b'
      scope: keyword.operator.word.mnemonic.supplemental.via
    - match: '\b(x(store(rng)?|crypt(ecb|cbc|ctr|cfb|ofb)|sha(1|256)))\b'
      scope: keyword.operator.word.mnemonic.supplemental.via.padlock
  mnemonics-undocumented:
    - match: '\b(ret[nf]|icebp|int1|smi)\b'
      scope: keyword.operator.word.mnemonic.undocumented
  mnemonics-future-intel:
    - include: mnemonics-future-intel-avx512
    - include: mnemonics-future-intel-opmask
    - include: mnemonics-future-intel-cet
    - include: mnemonics-future-intel-other
  mnemonics-future-intel-avx512:
    - match: '\b(vblendm(pd|ps)|vpblendm[bdqw])\b'
      scope: keyword.operator.word.mnemonic.avx512.blend
    - match: '\b(vbroadcast[fi](32x[248]|64x[24])|v(extract|insert)[fi](32x[48]|64x[24])|vshuf[fi](32x4|64x2)|vpbroadcastm(b2q|w2d))\b'
      scope: keyword.operator.word.mnemonic.avx512.bits-mov
    - match: '\b(v(compress|expand)p[ds]|vp(compress|expand|conflict)[dq])\b'
      scope: keyword.operator.word.mnemonic.avx512.compress
    - match: '\b(vcvt(t?p[sd]2(udq|u?qq)|(udq|u?qq)2p[ds]|t?s[ds]2usi|usi2s[ds]))\b'
      scope: keyword.operator.word.mnemonic.avx512.conversion
    - match: '\b(v(fixupimm|fpclass|get(exp|mant)|range|(rcp|rsqrt)(14|28)|reduce|rndscale|scalef)([ps][ds]))\b'
      scope: keyword.operator.word.mnemonic.avx512.math
    - match: '\b(v(exp2p[ds]|(scatter|(gather|scatter)pf[01])[dq]p[ds]))\b'
      scope: keyword.operator.word.mnemonic.avx512.math
    - match: '\b(vmovdq(a(32|64)|u(8|16|32|64)))\b'
      scope: keyword.operator.word.mnemonic.avx512.simd-integer
    - match: '\b(vp(andn?|x?or)[dq])\b'
      scope: keyword.operator.word.mnemonic.avx512.logical
    - match: '\b(vpcmpu?[dqw])\b'
      scope: keyword.operator.word.mnemonic.avx512.packed-comparison
    - match: '\b(vp(absq|(lzcnt|ternlog)[dq]|madd52[lh]uq|(max|min)[su]q|mullq))\b'
      scope: keyword.operator.word.mnemonic.avx512.packed-math
    - match: '\b(vpmov(m2[bdqw]|[bdqw]2m|(u?s)?([qd][bw]|qd|wb)))\b'
      scope: keyword.operator.word.mnemonic.avx512.packed-mov
    - match: '\b(vp(ro[rl]v?[dq]|scatter[dq][dq]))\b'
      scope: keyword.operator.word.mnemonic.avx512.packed-shift
    - match: '\b(vptestn?m[bdqw])\b'
      scope: keyword.operator.word.mnemonic.avx512.packed-test
    - match: '\b(vperm([bdw]|[it]2([bdwq]|p[ds])))\b'
      scope: keyword.operator.word.mnemonic.avx512.permutations
    - match: '\b(valign[dq]|vdbpsadbw|vpmultishiftqb|vpsrav[dqw])\b'
      scope: keyword.operator.word.mnemonic.avx512.other
  mnemonics-future-intel-opmask:
    - match: '\b(k(add|andn?|(xn?)?or|mov|not|(or)?test|shift[lr])[bdqw]|kunpck(bw|wd|dq))\b'
      scope: keyword.operator.word.mnemonic.opmask
  mnemonics-future-intel-cet:
    - match: '\b((inc|save|rstor)ssp|wru?ss|(set|clr)ssbsy|endbranch|endbr(32|64))\b'
      scope: keyword.operator.word.mnemonic.cet
  mnemonics-future-intel-other:
    - match: '\b(clflushopt|clwb|pcommit)\b'
      scope: keyword.operator.word.mnemonic.other
  mnemonics-pseudo-ops:
    - match: '\b(cmp(n?(eq|lt|le)|(un)?ord)[ps][ds])\b'
      scope: keyword.pseudo-mnemonic.sse2.compare
    - match: '\b(v?pclmul([hl]q[hl]q|[hl]qh)dq)\b'
      scope: keyword.pseudo-mnemonic.avx.promoted.aes
    - match: '\b(vcmp(eq(_(os|uq|us))?|neq(_(oq|os|us))?|[gl][et](_oq)?|n[gl][et](_uq)?|(un)?ord(_s)?|false(_os)?|true(_us)?)[ps][ds])\b'
      scope: keyword.pseudo-mnemonic.avx.promoted.comparison
    - match: '\b(vpcom(n?eq|[gl][et]|false|true)(b|uw))\b'
      scope: keyword.pseudo-mnemonic.supplemental.amd.xop.simd
  mnemonics-invalid:
    - include: mnemonics-invalid-amd-sse5
  mnemonics-invalid-amd-sse5:
    - match: '\b(com[ps][ds]|pcomu?[bdqw])\b'
      scope: invalid.keyword.operator.word.mnemonic.sse5.comparison
    - match: '\b(cvtp(h2ps|s2ph)|frcz[ps][ds])\b'
      scope: invalid.keyword.operator.word.mnemonic.sse5.conversion
    - match: '\b(fn?m((add|sub)[ps][ds])|ph(addu?(b[dqw]|w[dq]|dq)|sub(bw|dq|wd))|pma(css?(d(d|q[hl])|w[dw])|dcss?wd))\b'
      scope: invalid.keyword.operator.word.mnemonic.sse5.packed-arithmetic
    - match: '\b(pcmov|permp[ds]|pperm|prot[bdqw]|psh[al][bdqw])\b'
      scope: invalid.keyword.operator.word.mnemonic.sse5.simd-integer
...