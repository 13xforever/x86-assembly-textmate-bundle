<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>asm</string>
		<string>nasm</string>
		<string>yasm</string>
		<string>inc</string>
	</array>
	<key>name</key>
	<string>x86_64 Assembly</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#support</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#registers</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#mnemonics</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#entities</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constants</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;.*$</string>
					<key>name</key>
					<string>comment.line</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[\#%]\s*if\s+0\b</string>
					<key>end</key>
					<string>^\s*[\#%]\s*endif\b</string>
					<key>name</key>
					<string>comment.preprocessor</string>
				</dict>
			</array>
		</dict>
		<key>constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\$[0-9a-f]+\b</string>
					<key>name</key>
					<string>constant.numeric.literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[0-9]+\b</string>
					<key>name</key>
					<string>constant.numeric.dec</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([0-9a-fA-F]+h?|0x[0-9a-fA-F]+)\b</string>
					<key>name</key>
					<string>constant.numeric.hex</string>
				</dict>
			</array>
		</dict>
		<key>entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(section\W+)?\.(data|bss|text)$</string>
					<key>name</key>
					<string>entity.name.section</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^\s*\.?\w+:\s*(?=$|;)</string>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^\.?(globl|global)\b</string>
					<key>name</key>
					<string>entity.directive</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#mnemonics-general-purpose</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-fpu</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-mmx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-sse</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-sse2</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-fpu</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(fcmov(n?([beu]|be)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.data-transfer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(i?(ld|stp?)|b(ld|stp)|xch))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.data-transfer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f((add|div|mul|sub)p?|i(add|div|mul|sub)|(div|sub)rp?|i(div|sub)r))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.basic-arithmetic.basic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(prem1?|abs|chs|rndint|scale|sqrt|xtract))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.basic-arithmetic.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(u?com[ip]?p?|icomp?|tst|xam))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(sin|cos|sincos|pa?tan|2xm1|yl2xp1))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.transcendental</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(fld(1|z|pi|l2[et]|l[ng]2))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.load-constants</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f((inc|dec)stp|free|n?(init|clex|st[cs]w|stenv|save)|ld(cw|env)|rstor|nop)|f?wait)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(fx(save|rstor))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.state-management</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-general-purpose</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov([sz]x)?|cmov(n?[abceglopsz]|n?[abgl]e|p[eo]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.data-transfer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(xchg|bswap|xadd|cmpxchg(8b)?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.data-transfer.xchg</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((push|pop)(ad?)?|cwde?|cdq|cbw)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.data-transfer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(adcx?|adox|add|sub|sbb|i?mul|i?div|inc|dec|neg|cmp)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.binary-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(daa|das|aaa|aas|aam|aad)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.decimal-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(and|x?or|not)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(s[ah][rl]|sh[rl]d|r[co][rl])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.rotate</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(set(n?[abceglopsz]|n?[abgl]e|p[eo]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.bit-and-byte.set</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(bt[crs]?|bs[fr]|test|crc32|popcnt)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.bit-and-byte.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(jmp|jn?[abceglopsz]|jn?[abgl]e|jp[eo]|je?cxz)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.control-transfer.jmp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(loop(n?[ez])?|call|ret[nf]?|iret|into?|bound|enter|leave)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.control-transfer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((mov|cmp|sca|lod|sto)(s[bdw]?)|rep(n?[ez])?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.string</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((in|out)(s[bdw]?)?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.io</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((st|cl)[cdi]|cmc|[ls]ahf|(push|pop)fd?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.flag-control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(l[defgs]s)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.segment-registers</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(lea|nop|ud2|xlatb?|cpuid|movbe)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.misc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(rdrand|rdseed)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.rng</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(andn|bls(i|msk)|bzhi|pdep|pext|[lt]zcnt|(mul|ror|sar|shl|shr)x)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.bmi</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-mmx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov[dq])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.data-transfer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pack(ssdw|[su]swb)|punpck[hl](bw|dq|wd))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p(addd|maddwd|((add|sub)(u?s)?[bw])|mul[lh]w))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pcmp((eq|gt)[bdw]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pandn?|px?or)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(ps([rl]l[dwq]|raw|rad))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.shift-and-rotate</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(emms)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.state-management</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-sse</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov(([ahlu]|hl|lh|msk)ps|ss))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.data-transfer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((add|div|max|min|mul|rcp|r?sqrt|sub)[ps]s)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cmp[ps]s|u?comiss)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((andn?|x?or)ps)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((shuf|unpck[hl])ps)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.shuffle-and-unpack</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvt(pi2ps|si2ss|ps2pi|tps2pi|ss2si|tss2si))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((ld|st)mxcsr)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.state-management</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p(avg[bw]|extrw|insrw|(max|min)(sw|ub)|sadbw|shufw|mulhuw|movmskb))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.simd-integer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(maskmovq|movntps|sfence)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.cacheability-control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(prefetch(nta|t[0-2]|w(t1)?))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.prefetch</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-sse2</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov([auhl]|msk)pd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.data-transfer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((add|div|max|min|mul|sub|sqrt)[ps]d)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((andn?|x?or)pd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((cmpp|u?comis)d)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.compare</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((shuf|unpck[hl])pd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.shuffle-and-unpack</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvt(dq2pd|pd2dq|pd2pi|pi2pd|ps2pd|sd2si|sd2ss|si2sd|ss2sd|t(pd2dq|pd2pi|sd2si)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvt(dq2ps|ps2dq|tps2dq))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.packed-floating-point</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(mov(dq[au]|q2dq|dq2q))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.simd-integer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p((add|sub|(s[lr]l|mulu|unpck[hl]q)d)q|shuf(d|[hl]w)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.simd-integer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(clflush|[lm]fence|maskmovdqu|movnt(dq|i))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.cacheability-control</string>
				</dict>
			</array>
		</dict>
		<key>preprocessor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*[#%]\s*(error|warning)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.error.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.preprocessor.diagnostic.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[#%]\s*(include|import)\b\s+</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.include.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.c.include</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>"</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.c</string>
								</dict>
							</dict>
							<key>end</key>
							<string>"</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.c</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.double.include.c</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>&lt;</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.c</string>
								</dict>
							</dict>
							<key>end</key>
							<string>&gt;</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.c</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.other.lt-gt.include.c</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[%#]\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>registers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b%?([abcd][hl]|[er]?[abcd]x|[er]?(di|si|bp|sp)|dil|sil|bpl|spl|r(8|9|1[0-5])[bdlw]?)\b</string>
					<key>name</key>
					<string>constant.language.registers.general-purpose</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([cdefgs]s)\b</string>
					<key>name</key>
					<string>constant.language.registers.segment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([er]?flags)\b</string>
					<key>name</key>
					<string>constant.language.registers.flags</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([er]?ip)\b</string>
					<key>name</key>
					<string>constant.language.registers.instruction-pointer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(cr[02-48]|tpr)\b</string>
					<key>name</key>
					<string>constant.language.registers.control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?((mm|st|fpr)[0-7])\b</string>
					<key>name</key>
					<string>constant.language.registers.mmx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([xy]mm([0-9]|1[0-5])|mxcsr)\b</string>
					<key>name</key>
					<string>constant.language.registers.sse_avx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(([gil]dt)r?|tr)\b</string>
					<key>name</key>
					<string>constant.language.registers.system-table-pointer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(dr[0-367])\b</string>
					<key>name</key>
					<string>constant.language.registers.debug</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>["']</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.asm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>["']</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.asm</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.asm</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string_placeholder</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)\b((d|q|t|y)?word|db|dw|dd|dq|dt|do|dy|res(b|w|d|q|t|o|y)?|incbin|equ|times)\b</string>
					<key>name</key>
					<string>support.type.asm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(\.?align)\b</string>
					<key>name</key>
					<string>support.other.asm.directive</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.asm.x86_64</string>
	<key>uuid</key>
	<string>05d6565d-991a-4e88-8e28-63bb21197f32</string>
</dict>
</plist>
