# [PackageDev] target_format: plist, ext: tmLanguage
name: x86_64 Assembly
scopeName: source.asm.x86_64
fileTypes: [asm, nasm, yasm, inc]
uuid: 05d6565d-991a-4e88-8e28-63bb21197f32

patterns:
- include: '#comments'
- include: '#preprocessor'
- include: '#strings'
- include: '#support'
- include: '#registers'
- include: '#mnemonics'
- include: '#entities'
- include: '#constants'

repository:
  comments:
    patterns:
    - name: comment.line
      match: ;.*$
    - name: comment.block
      begin: /\*
      end: \*/
    - name: comment.preprocessor
      begin: ^\s*[\#%]\s*if\s+0\b
      end: ^\s*[\#%]\s*endif\b

  preprocessor:
    patterns:
    - name: meta.preprocessor.diagnostic.c
      begin: ^\s*[#%]\s*(error|warning)\b
      end: $
      captures:
        '1': {name: keyword.control.import.error.c}
      patterns:
      - name: punctuation.separator.continuation.c
        match: (?>\\\s*\n)
    
    - name: meta.preprocessor.c.include
      begin: ^\s*[#%]\s*(include|import)\b\s+
      end: (?=(?://|/\*))|$
      captures:
        '1': {name: keyword.control.import.include.c}
      patterns:
      - name: punctuation.separator.continuation.c
        match: (?>\\\s*\n)
      - name: string.quoted.double.include.c
        begin: '"'
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.c}
        end: '"'
        endCaptures:
          '0': {name: punctuation.definition.string.end.c}
      - name: string.quoted.other.lt-gt.include.c
        begin: <
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.c}
        end: '>'
        endCaptures:
          '0': {name: punctuation.definition.string.end.c}
    
    - name: meta.preprocessor.c
      begin: ^\s*[%#]\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b
      end: (?=(?://|/\*))|$
      captures:
        '1': {name: keyword.control.import.c}
      patterns:
      - match: (?>\\\s*\n)
        name: punctuation.separator.continuation.c

  strings:
    patterns:
    - name: string.quoted.asm
      begin: '["'']'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.asm}
      end: '["'']'
      endCaptures:
        '0': {name: punctuation.definition.string.end.asm}
      patterns:
      - include: '#string_escaped_char'
      - include: '#string_placeholder' #where are these patterns?
    
    - name: string.quoted.single.c
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.c}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.c}
      patterns:
      - include: '#string_escaped_char'

  support:
    name: support.type.asm
    match: (?i)\b((d|q|t|y)?word|db|dw|dd|dq|dt|do|dy|res(b|w|d|q|t|o|y)?|incbin|equ|times)\b

  registers:
    patterns:
    - name: constant.language.registers.general-purpose
      match: \b%?([abcd][hl]|[er]?[abcd]x|[er]?(di|si|bp|sp)|dil|sil|bpl|spl|r(8|9|1[0-5])[bdlw]?)\b
    - name: constant.language.registers.segment
      match: \b%?([cdefgs]s)\b
    - name: constant.language.registers.flags
      match: \b%?([er]?flags)\b
    - name: constant.language.registers.instruction-pointer
      match: \b%?([er]?ip)\b
    - name: constant.language.registers.control
      match: \b%?(cr[02-48]|tpr)\b
    - name: constant.language.registers.mmx
      match: \b%?((mm|st|fpr)[0-7])\b
    - name: constant.language.registers.sse_avx
      match: \b%?([xy]mm([0-9]|1[0-5])|mxcsr)\b
    - name: constant.language.registers.system-table-pointer
      match: \b%?(([gil]dt)r?|tr)\b
    - name: constant.language.registers.debug
      match: \b%?(dr[0-367])\b

  mnemonics: # see valid.asm for references
    patterns:
    - include: '#mnemonics-general-purpose'
    - include: '#mnemonics-fpu'
    - include: '#mnemonics-mmx'
    - include: '#mnemonics-sse'

  mnemonics-general-purpose:
    patterns:
    - name: keyword.mnemonic.general-purpose.data-transfer.mov
      match: \b(mov([sz]x)?|cmov(n?[abceglopsz]|n?[abgl]e|p[eo]))\b
    - name: keyword.mnemonic.general-purpose.data-transfer.xchg
      match: \b(xchg|bswap|xadd|cmpxchg(8b)?)\b
    - name: keyword.mnemonic.general-purpose.data-transfer.other
      match: \b((push|pop)(ad?)?|cwde?|cdq|cbw)\b
    - name: keyword.mnemonic.general-purpose.binary-arithmetic
      match: \b(adcx?|adox|add|sub|sbb|i?mul|i?div|inc|dec|neg|cmp)\b
    - name: keyword.mnemonic.general-purpose.decimal-arithmetic
      match: \b(daa|das|aaa|aas|aam|aad)\b
    - name: keyword.mnemonic.general-purpose.logical
      match: \b(and|x?or|not)\b
    - name: keyword.mnemonic.general-purpose.rotate
      match: \b(s[ah][rl]|sh[rl]d|r[co][rl])\b
    - name: keyword.mnemonic.general-purpose.bit-and-byte.set
      match: \b(set(n?[abceglopsz]|n?[abgl]e|p[eo]))\b
    - name: keyword.mnemonic.general-purpose.bit-and-byte.other
      match: \b(bt[crs]?|bs[fr]|test|crc32|popcnt)\b
    - name: keyword.mnemonic.general-purpose.control-transfer.jmp
      match: \b(jmp|jn?[abceglopsz]|jn?[abgl]e|jp[eo]|je?cxz)\b
    - name: keyword.mnemonic.general-purpose.control-transfer.other
      match: \b(loop(n?[ez])?|call|ret[nf]?|iret|into?|bound|enter|leave)\b
    - name: keyword.mnemonic.general-purpose.string
      match: \b((mov|cmp|sca|lod|sto)(s[bdw]?)|rep(n?[ez])?)\b
    - name: keyword.mnemonic.general-purpose.io
      match: \b((in|out)(s[bdw]?)?)\b
    - name: keyword.mnemonic.general-purpose.flag-control
      match: \b((st|cl)[cdi]|cmc|[ls]ahf|(push|pop)fd?)\b
    - name: keyword.mnemonic.general-purpose.segment-registers
      match: \b(l[defgs]s)\b
    - name: keyword.mnemonic.general-purpose.misc
      match: \b(lea|nop|ud2|xlatb?|cpuid|movbe)\b
    - name: keyword.mnemonic.general-purpose.rng
      match: \b(rdrand|rdseed)\b
    - name: keyword.mnemonic.general-purpose.bmi
      match: \b(andn|bls(i|msk)|bzhi|pdep|pext|[lt]zcnt|(mul|ror|sar|shl|shr)x)\b

  mnemonics-fpu:
    patterns:
    - name: keyword.mnemonic.fpu.data-transfer.mov
      match: \b(fcmov(n?([beu]|be)))\b
    - name: keyword.mnemonic.fpu.data-transfer.other
      match: \b(f(i?(ld|stp?)|b(ld|stp)|xch))\b
    - name: keyword.mnemonic.fpu.basic-arithmetic.basic
      match: \b(f((add|div|mul|sub)p?|i(add|div|mul|sub)|(div|sub)rp?|i(div|sub)r))\b
    - name: keyword.mnemonic.fpu.basic-arithmetic.other
      match: \b(f(prem1?|abs|chs|rndint|scale|sqrt|xtract))\b
    - name: keyword.mnemonic.fpu.comparison
      match: \b(f(u?com[ip]?p?|icomp?|tst|xam))\b
    - name: keyword.mnemonic.fpu.transcendental
      match: \b(f(sin|cos|sincos|pa?tan|2xm1|yl2xp1))\b
    - name: keyword.mnemonic.fpu.load-constants
      match: \b(fld(1|z|pi|l2[et]|l[ng]2))\b
    - name: keyword.mnemonic.fpu.control
      match: \b(f((inc|dec)stp|free|n?(init|clex|st[cs]w|stenv|save)|ld(cw|env)|rstor|nop)|f?wait)\b
    - name: keyword.mnemonic.fpu.state-management
      match: \b(fx(save|rstor))\b

  mnemonics-mmx:
    patterns:
    - name: keyword.mnemonic.mmx.data-transfer
      match: \b(mov[dq])\b
    - name: keyword.mnemonic.mmx.conversion
      match: \b(pack(ssdw|[su]swb)|punpck[hl](bw|dq|wd))\b
    - name: keyword.mnemonic.mmx.packed-arithmetic
      match: \b(p(addd|maddwd|((add|sub)(u?s)?[bw])|mul[lh]w))\b
    - name: keyword.mnemonic.mmx.comparison
      match: \b(pcmp((eq|gt)[bdw]))\b
    - name: keyword.mnemonic.mmx.logical
      match: \b(pandn?|px?or)\b
    - name: keyword.mnemonic.mmx.shift-and-rotate
      match: \b(ps([rl]l[dwq]|raw|rad))\b
    - name: keyword.mnemonic.mmx.state-management
      match: \b(emms)\b

  mnemonics-sse:
    patterns:
    - name: keyword.mnemonic.sse.data-transfer
      match: \b(mov(([ahlu]|hl|lh|msk)ps|ss))\b
    - name: keyword.mnemonic.sse.packed-arithmetic
      match: \b((add|div|max|min|mul|rcp|r?sqrt|sub)[ps]s)\b
    - name: keyword.mnemonic.sse.comparison
      match: \b(cmp[ps]s|u?comiss)\b
    - name: keyword.mnemonic.sse.logical
      match: \b((andn?|x?or)ps)\b
    - name: keyword.mnemonic.sse.shuffle-and-unpack
      match: \b((shuf|unpck[hl])ps)\b
    - name: keyword.mnemonic.sse.conversion
      match: \b(cvt(pi2ps|si2ss|ps2pi|tps2pi|ss2si|tss2si))\b
    - name: keyword.mnemonic.sse.state-management
      match: \b((ld|st)mxcsr)\b
    - name: keyword.mnemonic.sse.simd-integer
      match: \b(p(avg[bw]|extrw|insrw|(max|min)(sw|ub)|sadbw|shufw|mulhuw|movmskb))\b
    - name: keyword.mnemonic.sse.cacheability-control
      match: \b(maskmovq|movntps|sfence)\b
    - name: keyword.mnemonic.sse.prefetch
      match: \b(prefetch(nta|t[0-2]|w(t1)?))\b

  entities:
    patterns:
    - name: entity.name.section
      match: \.(data|bss|text)$

    - name: entity.name.function
      match: ^\s*\.?\w+:\s*(?=$|;)
    
    - name: entity.directive
      match: ^\.?(globl|global)\b

  constants:
    patterns:
    - name: constant.numeric.literal
      match: \$[0-9a-f]+\b
    
    - name: constant.numeric.dec
      match: \b[0-9]+\b
    
    - name: constant.numeric.hex
      match: \b([0-9a-fA-F]+h?|0x[0-9a-fA-F]+)\b

...