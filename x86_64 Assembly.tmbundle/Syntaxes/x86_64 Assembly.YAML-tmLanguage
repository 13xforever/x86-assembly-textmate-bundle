# [PackageDev] target_format: plist, ext: tmLanguage
name: x86_64 Assembly
scopeName: source.asm.x86_64
fileTypes: [asm, nasm, yasm, inc]
uuid: 05d6565d-991a-4e88-8e28-63bb21197f32

patterns:
- name: comment.line
  match: ;.*$

- name: comment.preprocessor
  begin: ^\s*[\#%]\s*if\s+0\b
  end: ^\s*[\#%]\s*endif\b

- name: comment.block
  begin: /\*
  end: \*/

- name: support.type.asm
  match: (?i)\b((d|q|t|y)?word|db|dw|dd|dq|dt|do|dy|res(b|w|d|q|t|o|y)?|incbin|equ|times)\b

- name: string.section
  match: \.(data|bss|text)$

- name: string.quoted.asm
  begin: '["'']'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.asm}
  end: '["'']'
  endCaptures:
    '0': {name: punctuation.definition.string.end.asm}
  patterns:
  - include: '#string_escaped_char'
  - include: '#string_placeholder'

- name: string.quoted.single.c
  begin: "'"
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.c}
  end: "'"
  endCaptures:
    '0': {name: punctuation.definition.string.end.c}
  patterns:
  - include: '#string_escaped_char'

- name: meta.preprocessor.diagnostic.c
  begin: ^\s*[#%]\s*(error|warning)\b
  end: $
  captures:
    '1': {name: keyword.control.import.error.c}
  patterns:
  - name: punctuation.separator.continuation.c
    match: (?>\\\s*\n)

- name: meta.preprocessor.c.include
  begin: ^\s*[#%]\s*(include|import)\b\s+
  end: (?=(?://|/\*))|$
  captures:
    '1': {name: keyword.control.import.include.c}
  patterns:
  - name: punctuation.separator.continuation.c
    match: (?>\\\s*\n)
  - name: string.quoted.double.include.c
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.c}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.c}
  - name: string.quoted.other.lt-gt.include.c
    begin: <
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.c}
    end: '>'
    endCaptures:
      '0': {name: punctuation.definition.string.end.c}

- name: meta.preprocessor.c
  begin: ^\s*[%#]\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b
  end: (?=(?://|/\*))|$
  captures:
    '1': {name: keyword.control.import.c}
  patterns:
  - match: (?>\\\s*\n)
    name: punctuation.separator.continuation.c

- name: storage.registers.intel
  match: \b(%?(((a|b|c|d)h)|((a|b|c|d|di|si|bp|sp)l)|(((e|r)?((a|b|c|d)x|(di|si|bp|sp|ip)|flags))|cs|ds|ss|es|fs|gs|([xy]mm([0-9]|1[0-5]))|mxcsr|((st|mm|fpr)[0-7]))|(cr[02348])|(dr[0-367])|([gli]dtr?)|(r([89]|1[0-5])[bdlw]?)|tp?r))\b

- name: keyword.mnemonic.32.intel
  match: \b(aaa|aad|aam|aas|adc|add|andn?|arpl|bl[cs](fill|ic?|msk)|blcs|blsr|bound|bsf|bsr|bswap|bt[crs]?|call|cbw|cwde?|cdqe?|cqo|clflush|cl(c|d|gi|i|ts)|cmc|cmp|cmps[bwdq]?|cmpxchg((8|16)b)?|cpuid|crc32|daa|das|dec|div|enter|f?emms|esc|getsec|hlt|idiv|imul|in|inc|ins[bwd]?|into?|inv(d|lpga?|pcid)|iret[dq]?|jmp|lahf|lar|l[defgs]s|lea|leave|[lms]fence|[ls][gil]dt|lmsw|lock|lods[bwdq]?|loop(n?[ez])?|ls[ls]|ltr|lwp(ins|val)|monitor|mov(be|d|q|dq2q|nti|ntq|q2dq|s[bwdqx]?|sxd|zx)?|mul|neg|nop|not|or|out|outs[bwd]?|pause|(pop|push)(a|ad|f|fd|fq)?|popcnt|prefetch(nta|t[012]|w)?|r[co][lr]|(rd|wr)[fg]sbase|(rd|wr)msr|rdpmc|rdrand|rdtscp?|rep(n?[ez])?|ret[nf]?|rsm|sahf|s[ah][lr]|sbb|scas[bwd]|sh[lr]d|smsw|st(c|d|gi|i)|stos[bwdq]|str|sub|swapgs|sys(call|ret|enter|exit)|test|ud2|vbroadcast(f128|sd|ss)|vcvtph2ps|vcvtps2ph|ver[rw]|v(extract|insert|perm2)f128|vzero(all|upper)|[fm]?wait|wbinvd|xadd|xchg|xgetbv|xlatb?|xor|xrstor|xsave(opt)?|xsetbv)\b

- name: keyword.mnemonic.32.amd
  match: \b(bextr|extrq|insertq|llwpcb|lzcnt|skinit|slwpcb|t1mskc|tz(cnt|msk)|vm(load|mcall|run|save)|vpc(mov|omu?[bdqw])|vpmacss?(dd|dql|dqh|ww|wd)|vpmadcss?wd|vpperm|vprot[bdqw]|vpsh[al][bdqw]|pavgusb|pf(2i[dw]|acc|add|cmpeq|cmpgt|max|min|mul|p?nacc|rcp(it[12])?|rsqit1|rsqrt|subr?)|pi2f[dw]|pmulhrw|pswapd)\b

- name: keyword.mnemonic.32.fpu
  match: \b(f(2xm1|abs|add|addp|iadd|bld|bstp|chs|n?clex|cmovn?(b|e|be|u)|(u?comi?)p?|u?compp|cos|decstp|divr?p?|idivr?|free|icomp?|ild|incstp|n?init|ist(p|tp)?|ld(1|l2t|l2e|pi|lg2|ln2|z|cw|env)?|imul|mulp?|nop|p(atan|rem1?|tan)|rndint|rstor|n?save|scale|sin(cos)?|sqrt|stp?|n?st(cw|env|sw)|subr?p?|isubr?|tst|xam|xch|xrstor|xsave|xtract|yl2x(p1)?))\b

- name: keyword.mnemonic.32.other
  match: \b(icebp|int1|smi)\b

- name: keyword.mnemonic.64.vex
  match: \b((v)?(aesdec|aesdeclast|aesenc|aesenclast|aesimc|aeskeygenassist|cvtpd2(dq|pi|ps)|cvtps2(dq|pd|pi)|cvtsd2(si|ss)|cvtss2(sd|si)|cvtt(pd|ps)2(dq|pi)|cvtt(sd|ss)2si|extractps|insertps|ld(dqu|mxcsr)|maskmov(dqu|q)|mov((d|sh|hl)dup|dqa|dqu|hlps|lhps|ntdqa?|s[ds])?|mpsadbw|pabs[bwd]|pack(s|u)s(wb|dw)|padd([bwdq]|u?s(b|w))|palignr|pandn?|pavg[bw]|pblend(vb|w)|pclmulqdq|pcmp((eq|gt)[bwdq]|[ei]str[im])|pextr[bwdq]|phadd(w|d|sw)|phminposuw|phsub(w|d|sw)|pinsr[bwdq]|pmadd(ubsw|wd)|p(max|min)[su][bdw]|pmov(mskb|([sz]x(b[dqw]|w[dq]|dq)))|pmul(dq|hrsw|hu?w|ld|lw|udq)|por|psadbw|pshuf[bdw]|pshuf[hl]w|psign[bwd]|ps[lr]l(dq|w|d|q)|psra[wd]|psub([bwdq]|u?s[bw])|ptest|punpck[hl](bw|wd|dq|qdq)|pxor|rcp[ps]s|rsqrt[ps]s|stmxcsr|ucomis[ds]))\b

- name: keyword.mnemonic.64.vex_pd_ps_sd_ss.intel
  match: \b((v)?(add|cmp|div|max|min|mul|round|sqrt|sub)[ps][ds])\b

- name: keyword.mnemonic.64.vex_pd_ps_sd_ss.amd
  match: \b(vf(((n?m(add|sub)|fm(addsub|subadd))(132|213|231)?)|rcz)[ps][ds])\b

- name: keyword.mnemonic.64.vex_pd_ps
  match: \b((v)?(addsub|and|andn|blend|blendv|clflush|cmppd|cmpps|cmpsd|cmpss|cvt(dq|pi)2|dp|hadd|hsub|mov(a|h|l|msk|nt|u)|or|shuf|unpck[hl]|xor)p[ds])\b

- name: keyword.mnemonic.64.vex_sd_ss
  match: \b((v)?(comi|cvtsi2)s[ds])\b

- name: keyword.mnemonic.64.pd_ps
  match: \b(v(maskmov|permil2?|test)p[ds])\b

- name: keyword.mnemonic.64.cmov_set_cc
  match: \b((cmov|set)((n?(a|ae|b|be|c|e|g|ge|l|le|o|p|s|z))|(pe|po)))\b

- name: keyword.mnemonic.64.jcc
  match: \b(j((n?(a|ae|b|be|c|e|g|ge|l|le|o|p|s|z))|(cxz|ecxz|rcxz|pe|po)))\b

- name: keyword.mnemonic.sha
  match: \b(sha(1(msg1|msg2|nexte|rnds4)|256(msg1|msg2|rnds2)))\b

- name: entity.name.label
  match: ^\s*\.?\w+:\s*(?=$|;)

- name: constant.numeric.literal
  match: \$[0-9a-f]+\b

- name: constant.numeric.dec
  match: \b[0-9]+\b

- name: constant.numeric.hex
  match: \b([0-9a-fA-F]+h?|0x[0-9a-fA-F]+)\b

- name: entity.directive
  match: ^\.?(globl|global)\b
